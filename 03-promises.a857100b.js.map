{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAqBA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA5BAQ,SAASC,cAAc,SAgB/BC,iBAAiB,UAkBtB,SAAsBC,GACpBA,EAAMC,iBAEN,MAAMC,EAAQC,OAAOH,EAAMI,OAAOC,SAAShB,MAAMiB,OAC3CC,EAAOJ,OAAOH,EAAMI,OAAOC,SAASE,KAAKD,OACzCE,EAASL,OAAOH,EAAMI,OAAOC,SAASG,OAAOF,OACnD,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAAG,CAGnCtB,EAAcsB,EADOP,GAASO,EAAI,GAAKF,GAEpCG,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MACjBsB,EAAA1B,GAAS2B,OAAOC,QAAQ,uBAAqBzB,QAAiBC,MAAW,CACnEyB,QAAO,KACT,IAELC,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MAClBsB,EAAA1B,GAAS2B,OAAOI,QAAQ,sBAAoB5B,QAAiBC,MAAW,CAClEyB,QAAO,KACT,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\nconst form = document.querySelector('.form');\n\n\n// function createPromise(position, delay) {\n//   return new Promise ((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve(`✅ Fulfilled promise ${position} in ${delay}ms`)\n//       } else {\n//         reject(`❌ Rejected promise ${position} in ${delay}ms`);\n//       }\n//     }, delay) \n//   });  \n// }\n\nform.addEventListener('submit', onFormSubmit);\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  \n  const delay = Number(event.target.elements.delay.value);\n  const step = Number(event.target.elements.step.value);\n  const amount = Number(event.target.elements.amount.value);\n  for (let i = 1; i <= amount; i += 1) {\n    // const promiseDelay = delay;\n    const promiseDelay = delay + (i - 1) * step;\n    createPromise(i, promiseDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n            timeout: 5000,\n          });\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n            timeout: 5000,\n          });\n      });\n  }\n  // event.target.reset();\n}\n \n\n\n\n\n\n\n\n\n\n\n// const form = document.querySelector('.form');\n// const delayInput = form.elements.delay;\n// const stepInput = form.elements.step;\n// const amountInput = form.elements.amount;\n\n// form.addEventListener('submit', (event) => {\n//   event.preventDefault();\n\n//   const delay = Number(delayInput.value);\n//   const step = Number(stepInput.value);\n//   const amount = Number(amountInput.value);\n\n//   for (let i = 1; i <= amount; i++) {\n//     createPromise(i, delay + (i - 1) * step)\n//       .then(({ position, delay }) => {\n//         notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       })\n//       .catch(({ position, delay }) => {\n//         notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//       });\n//   }\n// });\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","delay1","Number","target","elements","value","step","amount","i","then","$parcel$interopDefault","Notify","success","timeout","catch","failure"],"version":3,"file":"03-promises.a857100b.js.map"}