{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAGpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAS,CAACC,EAASC,KAC5B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,uBAAqBH,QAAiBC,OAK5CG,EAAK,sBAAoBJ,QAAiBC,MAAU,GAKvDA,EAAM,G,CAIb,MAAMQ,EAAYC,IAChBC,EAAAjB,GAASkB,OAAOC,QAAQH,EAAO,CAAEI,QAAS,KAAQ,EAG9CC,EAAWC,IACfL,EAAAjB,GAASkB,OAAOK,QAAQD,EAAO,CAAEF,QAAS,KAAQ,EAKpDlB,EAAKsB,iBAAiB,UAkBtB,SAAsBC,GACpBA,EAAMC,iBAEN,MAAMnB,EAAQoB,OAAOF,EAAMG,OAAOC,SAAStB,MAAMS,OAC3Cc,EAAOH,OAAOF,EAAMG,OAAOC,SAASC,KAAKd,OACzCe,EAASJ,OAAOF,EAAMG,OAAOC,SAASE,OAAOf,OAClD,IAAIgB,EAAezB,EACpB,IAAK,IAAI0B,EAAI,EAAGA,GAAKF,EAAQE,GAAK,EAGhC5B,EAAc4B,EAAGD,GAAcE,KAAKnB,GAAUoB,MAAMd,GAYpDW,GAAgBF,EAIlBL,EAAMG,OAAOQ,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\nconst form = document.querySelector('.form');\n\n\nfunction createPromise(position, delay) {\n  return new Promise ((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`)\n        // Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n        //     timeout: 5000,\n        //   });\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n        //  Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n        //     timeout: 5000,\n        // });\n      }\n    }, delay) \n  });  \n}\n\nconst onSucces = (value) => {\n  Notiflix.Notify.success(value, { timeout: 5000, });\n};\n\nconst OnError = (error) => {\n  Notiflix.Notify.failure(error, { timeout: 5000, });\n};\n\n\n\nform.addEventListener('submit', onFormSubmit);\n\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n\n\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  \n  const delay = Number(event.target.elements.delay.value);\n  const step = Number(event.target.elements.step.value);\n  const amount = Number(event.target.elements.amount.value);\n   let promiseDelay = delay;\n  for (let i = 1; i <= amount; i += 1) {\n    // let promiseDelay = delay;\n    // let promiseDelay = delay + (i - 1) * step;\n    createPromise(i, promiseDelay).then(onSucces).catch(OnError);\n      // .then(({ position, delay }) => {\n      //   Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n      //       timeout: 5000,\n      //     });\n      // })\n      // .catch(({ position, delay }) => {\n      //   Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n      //       timeout: 5000,\n      //   });\n        \n      // });\n    promiseDelay += step;\n    // console.log(promiseDelay);\n  }\n  \n  event.target.reset();\n}\n \n\n\n\n\n\n\n\n\n\n\n// const form = document.querySelector('.form');\n// const delayInput = form.elements.delay;\n// const stepInput = form.elements.step;\n// const amountInput = form.elements.amount;\n\n// form.addEventListener('submit', (event) => {\n//   event.preventDefault();\n\n//   const delay = Number(delayInput.value);\n//   const step = Number(stepInput.value);\n//   const amount = Number(amountInput.value);\n\n//   for (let i = 1; i <= amount; i++) {\n//     createPromise(i, delay + (i - 1) * step)\n//       .then(({ position, delay }) => {\n//         notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       })\n//       .catch(({ position, delay }) => {\n//         notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//       });\n//   }\n// });\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$47d4ff9957288465$var$onSucces","value","$parcel$interopDefault","Notify","success","timeout","$47d4ff9957288465$var$OnError","error","failure","addEventListener","event","preventDefault","Number","target","elements","step","amount","promiseDelay","i","then","catch","reset"],"version":3,"file":"03-promises.0153dfc8.js.map"}